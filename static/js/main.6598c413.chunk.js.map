{"version":3,"sources":["Components/Cards/card/index.js","Components/Cards/index.js","App.js","serviceWorker.js","index.js"],"names":["MyCard","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","removeCardHandle","_this$props","removeCard","data","editCardHandle","setState","isEdit","saveCardHandle","_this$props2","saveCard","state","editData","e","_e$target","target","name","value","defineProperty","cancel","renderCard","curdate","moment","format","react_default","a","createElement","Fragment","className","id","title","Button","close","onClick","description","color","outline","size","renderEditCard","Input","type","defaultValue","onChange","style","Component","Cards","addCard","showModal","saveNewTitle","newCardTitle","saveNewDesc","newCardDesc","addCardSave","_this$state","tasks","length","push","category","toggle","validate","item","splice","findIndex","i","editItem","hasOwnProperty","arr","map","obj","find","o","onDragStart","ev","console","log","dataTransfer","setData","onDragOver","preventDefault","onDrop","cat","getData","filter","task","objectSpread","_this2","all","todo","inprogress","completed","forEach","t","key","draggable","card","editCard","textAlign","Modal","isOpen","ModalHeader","ModalBody","Label","for","ModalFooter","disabled","App","Components_Cards","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6598c413.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./style.css\";\nimport moment from \"moment\";\nimport { Button, Input } from \"reactstrap\";\n\nclass MyCard extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isEdit: false\n    };\n  }\n\n  removeCardHandle = () => {\n    const { removeCard, data } = this.props;\n    removeCard(data);\n  };\n\n  editCardHandle = () => {\n    this.setState({ isEdit: true });\n  };\n  saveCardHandle = () => {\n    const { saveCard, data } = this.props;\n    saveCard(this.state, data);\n    this.setState({ isEdit: false });\n  };\n\n  editData = e => {\n    const { name, value } = e.target;\n    this.setState({ [name]: value });\n  };\n  cancel = () => {\n    this.setState({ isEdit: false });\n  };\n\n  renderCard = () => {\n    const { data } = this.props;\n    const curdate = moment().format(\"DD/MM/YYYY\");\n    return (\n      <>\n        <div className=\"cardbody\">\n          <div className=\"title\">\n            Task{data.id}: {data.title}\n            <Button close onClick={this.removeCardHandle} />\n          </div>\n          <div className=\"body\">{data.description}</div>\n          <div className=\"buttonClass\">\n            <div className=\"dateClass\">{curdate}</div>\n            <Button\n              onClick={this.editCardHandle}\n              color=\"info\"\n              outline\n              size=\"sm\"\n            >\n              Edit\n            </Button>\n          </div>\n        </div>\n      </>\n    );\n  };\n  renderEditCard = () => {\n    const { data } = this.props;\n    return (\n      <>\n        <div className=\"cardbody\">\n          <div className=\"title\">\n            Task{data.id}:{\" \"}\n            <Input\n              type=\"text\"\n              defaultValue={data.title}\n              name=\"title\"\n              onChange={this.editData}\n            />\n          </div>\n          <div className=\"body\">\n            {\" \"}\n            <Input\n              type=\"textarea\"\n              defaultValue={data.description}\n              name=\"description\"\n              onChange={this.editData}\n            />\n          </div>\n          <div className=\"buttonClass\">\n            <Button\n              onClick={this.saveCardHandle}\n              color=\"link\"\n              style={{ color: \"green\" }}\n            >\n              Save\n            </Button>\n            <Button onClick={this.cancel} color=\"link\" style={{ color: \"red\" }}>\n              Cancel\n            </Button>\n          </div>\n        </div>\n      </>\n    );\n  };\n  render() {\n    const { isEdit } = this.state;\n    return <>{isEdit ? this.renderEditCard() : this.renderCard()}</>;\n  }\n}\n\nexport default MyCard;\n","import React, { Component } from \"react\";\nimport MyCard from \"./card\";\nimport \"./style.css\";\nimport {\n  Modal,\n  ModalBody,\n  ModalHeader,\n  Button,\n  ModalFooter,\n  Input,\n  Label\n} from \"reactstrap\";\n\nclass Cards extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      tasks: [\n        {\n          id: 1,\n          title: \"first card\",\n          description: \"cafewfcacasc\",\n          category: \"all\"\n        },\n        {\n          id: 2,\n          title: \"second card\",\n          description: \"fewfcacasc\",\n          category: \"all\"\n        },\n        {\n          id: 3,\n          title: \"third card\",\n          description: \"cafewc\",\n          category: \"todo\"\n        }\n      ],\n      showModal: false,\n      newCardTitle: \"\",\n      newCardDesc: \"\"\n    };\n  }\n  addCard = () => {\n    this.setState({ showModal: true });\n  };\n  saveNewTitle = e => {\n    const { value } = e.target;\n    this.setState({ newCardTitle: value });\n  };\n  saveNewDesc = e => {\n    const { value } = e.target;\n    this.setState({ newCardDesc: value });\n  };\n\n  addCardSave = () => {\n    const { tasks, newCardDesc, newCardTitle } = this.state;\n    if (tasks.length > 1) {\n      let id = tasks[tasks.length - 1].id + 1;\n      tasks.push({\n        id,\n        title: newCardTitle,\n        description: newCardDesc,\n        category: \"all\"\n      });\n      this.setState({ tasks, showModal: false });\n    } else {\n      let id = 1;\n      tasks.push({\n        id,\n        title: newCardTitle,\n        description: newCardDesc,\n        category: \"all\"\n      });\n      this.setState({ tasks, showModal: false });\n    }\n  };\n\n  toggle = () => {\n    this.setState({\n      showModal: !this.state.showModal\n    });\n  };\n\n  validate = () => {\n    const { newCardTitle } = this.state;\n    if (newCardTitle === null || newCardTitle === \"\") {\n      return true;\n    } else return false;\n  };\n\n  removeCard = item => {\n    const { tasks } = this.state;\n    tasks.splice(\n      tasks.findIndex(function(i) {\n        return i.id === item.id;\n      }),\n      1\n    );\n    this.setState({ tasks });\n  };\n\n  saveCard = (editItem, item) => {\n    const { tasks } = this.state;\n    if (editItem.hasOwnProperty(\"title\")) {\n      item.title = editItem.title;\n    }\n    if (editItem.hasOwnProperty(\"description\")) {\n      item.description = editItem.description;\n    }\n    const arr = [];\n    arr.push(item);\n\n    tasks.map(obj => arr.find(o => o.id === obj.id) || obj);\n    this.setState({ tasks });\n  };\n\n  onDragStart = (ev, id) => {\n    console.log(\"dragstart:\", id);\n    ev.dataTransfer.setData(\"id\", id);\n  };\n\n  onDragOver = ev => {\n    ev.preventDefault();\n  };\n\n  onDrop = (ev, cat) => {\n    let id = ev.dataTransfer.getData(\"id\");\n    //console.log(\"ID\", id);\n\n    let tasks = this.state.tasks.filter(task => {\n      //console.log(\"BOTH IDS\", id, task.id);\n      if (task.id == id) {\n        task.category = cat;\n      }\n      return task;\n    });\n    //console.log(\"TASKS RETURNDDED\", tasks);\n    this.setState({\n      ...this.state,\n      tasks\n    });\n  };\n\n  render() {\n    const { newCardTitle } = this.state;\n    var tasks = { all: [], todo: [], inprogress: [], completed: [] };\n    this.state.tasks.forEach(t => {\n      tasks[t.category].push(\n        <div\n          key={t.name}\n          onDragStart={e => this.onDragStart(e, t.id)}\n          draggable\n          className=\"draggable\"\n        >\n          <MyCard\n            data={t}\n            key={t.id}\n            removeCard={this.removeCard}\n            editCard={this.editCard}\n            saveCard={this.saveCard}\n          />\n        </div>\n      );\n    });\n\n    return (\n      <>\n        <div className=\"container-drag\">\n          <div className=\"header\">\n          <div>\n              <Button onClick={this.addCard} outline color=\"danger\">\n                + ADD A NEW TASK\n              </Button>\n            </div>\n            <div className=\"heading\" style={{textAlign:'right'}}>YOUR PERSONAL PLANNER{\" \"}</div>\n          </div>\n\n          <div\n            className=\"all\"\n            onDragOver={e => this.onDragOver(e)}\n            onDrop={e => {\n              this.onDrop(e, \"all\");\n            }}\n          >\n            <span className=\"task-header\">ALL</span>\n            {tasks.all}\n          </div>\n\n          <div\n            className=\"todo\"\n            onDragOver={e => this.onDragOver(e)}\n            onDrop={e => {\n              this.onDrop(e, \"todo\");\n            }}\n          >\n            <span className=\"task-header\">TODO's</span>\n            {tasks.todo}\n          </div>\n\n          <div\n            className=\"inprogress\"\n            onDragOver={e => this.onDragOver(e)}\n            onDrop={e => {\n              this.onDrop(e, \"inprogress\");\n            }}\n          >\n            <span className=\"task-header\">IN-PROGRESS</span>\n            {tasks.inprogress}\n          </div>\n\n          <div\n            className=\"completed\"\n            onDragOver={e => this.onDragOver(e)}\n            onDrop={e => this.onDrop(e, \"completed\")}\n          >\n            <span className=\"task-header\">COMPLETED</span>\n            {tasks.completed}\n          </div>\n        </div>\n        <Modal isOpen={this.state.showModal} toggle={this.toggle}>\n          <ModalHeader toggle={this.toggle}>\n            ADD A TASK TO YOUR LIST\n          </ModalHeader>\n          <ModalBody>\n            <Label for=\"exampleText\">\n              <sup style={{ color: \"red\" }}>*</sup>Title:\n            </Label>\n            <Input\n              type=\"text\"\n              name=\"title\"\n              id=\"Title\"\n              onChange={this.saveNewTitle}\n            />\n            <Label for=\"exampleText\">Descripton:</Label>\n            <Input\n              type=\"textarea\"\n              name=\"description\"\n              id=\"Desc\"\n              onChange={this.saveNewDesc}\n            />\n          </ModalBody>\n          <ModalFooter>\n            <Button\n              color=\"primary\"\n              onClick={this.addCardSave}\n              disabled={newCardTitle !== \"\" ? false : true}\n            >\n              Save\n            </Button>\n            <Button color=\"secondary\" onClick={this.toggle}>\n              Cancel\n            </Button>\n          </ModalFooter>\n        </Modal>\n      </>\n    );\n  }\n}\n\nexport default Cards;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Cards from \"./Components/Cards\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"Container\">\n        <Cards />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n//import 'react-bootstrap/dist/react-bootstrap.js';\n//import 'bootstrap/dist/css/bootstrap.css';\n//import 'bootstrap/dist/css/bootstrap-theme.css'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}